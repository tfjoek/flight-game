import mysql.connector
import os

def create_connection():
    # DB yhdistys
    try:
        conn = mysql.connector.connect(
            host='127.0.0.1',
            port=3306,
            database='flight_game',
            user='vennilim',
            password='kappa',
            charset='utf8mb4',
            collation='utf8mb4_general_ci',
            autocommit=True
        )
        if conn.is_connected():
            return conn
        else:
            print("Yhteytt√§ ei voitu muodostaa.")
            return None
    except mysql.connector.Error as err:
        print(f"Tietokantavirhe: {err}")
        return None

def get_player_status(player_id):
    # Hakee pelaajan statsit tietokannasta
    conn = create_connection()
    if conn:
        cursor = conn.cursor(dictionary=True)
        query = "SELECT location, fuel, war_points FROM game WHERE id = %s"
        cursor.execute(query, (player_id,))
        player = cursor.fetchone()

        cursor.execute("SELECT COUNT(*) AS remaining_airports FROM airport WHERE ident NOT IN (SELECT location FROM game)")
        remaining_airports = cursor.fetchone()['remaining_airports']

        cursor.close()
        conn.close()

        return player, remaining_airports
    return None, None

def list_airports_by_owner(owner, emoji):
    """Hakee ja n√§ytt√§√§ lentokent√§t omistajan mukaan (Suomi tai Ven√§j√§)."""
    conn = create_connection()
    if conn:
        cursor = conn.cursor(dictionary=True)
        query = "SELECT name FROM airport WHERE owner = %s ORDER BY name"
        cursor.execute(query, (owner,))
        airports = cursor.fetchall()

        cursor.close()
        conn.close()

        if airports:
            print(f"Lentokent√§t {emoji} {owner}:n hallussa:")
            for airport in airports:
                print(f"{emoji} - {airport['name']}")
        else:
            print(f"Ei lentokentti√§ {emoji} {owner}:n hallussa.")

def list_all_airports():
    """Hakee ja n√§ytt√§√§ kaikki lentokent√§t aakkosj√§rjestyksess√§."""
    conn = create_connection()
    if conn:
        cursor = conn.cursor(dictionary=True)
        query = "SELECT name, owner FROM airport ORDER BY name"
        cursor.execute(query)
        airports = cursor.fetchall()

        cursor.close()
        conn.close()

        if airports:
            print("Kaikki lentokent√§t aakkosj√§rjestyksess√§:")
            for airport in airports:
                emoji = "üü¶" if airport['owner'] == 'Finland' else "üü•"
                print(f"{emoji} - {airport['name']}")
        else:
            print("Ei lentokentti√§ l√∂ydetty.")

# Pelaajan nykyiset statsit
def display_player_status(player, remaining_airports):
    os.system('cls' if os.name == 'nt' else 'clear')
    print("Muista sotilas! Olet meid√§n ainoa toivo!")
    term_size = os.get_terminal_size()
    print('=' * term_size.columns)
    print(f"Nykyinen sijaintisi: {player['location']}")
    print(f"Polttoainetta: {player['fuel']} km")
    print(f"Vapauttamattomia kentti√§: {remaining_airports}")
    print(f"Sotapisteet: {player['war_points']}")
    print('=' * term_size.columns)
    
    # Valikko
    print("üü¶ 1 - Listaa Suomen hallussa olevat lentokent√§t")
    print("üü• 2 - Listaa Ven√§j√§n vallassa olevat lentokent√§t")
    print("üåç 3 - Listaa kaikki lentokent√§t aakkosj√§rjestyksess√§")

def wait_for_enter():
    # Enter input
    input("Paina enter jatkaaksesi...")

def display_story():
    # Tarina ja odottaa enter key
    tarina = [
        "Olet kokenut lent√§j√§, jolla on aina ollut vahva rakkaus kotimaatasi kohtaan. "
        "Viime vuosina Suomen hallitus on tehnyt p√§√§t√∂ksi√§, jotka ovat rapauttaneet maan puolustuskyky√§. "
        "T√§m√§ on ollut t√§ydellinen tilaisuus Ven√§j√§lle, joka on pitk√§√§n suunnitellut hy√∂kk√§yst√§. "
        "Lopulta, koittaessa hetken, jota pel√§ttiin, Ven√§j√§ hy√∂kk√§√§ Suomeen.",
        
        "Ensimm√§isen√§ Ven√§j√§ iskee Suomen lentokenttiin. Y√∂ll√§, salaisen operaation aikana, suurin osa maan lentokentist√§ vallataan hetkess√§. "
        "Sin√§, lent√§j√§, her√§√§t uutiseen, ett√§ kotimaan ilmatila on menetetty, ja kent√§t ovat vihollisen hallussa. "
        "On selv√§√§, ett√§ toimintaasi tarvitaan ‚Äì sinut kutsutaan operaatioon vapauttamaan Suomi pala palalta.",
        
        "Matkasi on vaarallinen. Jokainen lentokentt√§ on strategisesti t√§rke√§, ja jokainen liike on elint√§rke√§. "
        "Tavoitteenasi on saavuttaa t√§rke√§t kent√§t ennen kuin vihollisen vahvistukset ehtiv√§t paikalle.",
        
        "Matkasi varrella voit avata huoltolaitteita, jotka auttavat sinua, mutta samalla on riski, ett√§ t√∂rm√§√§t vihollisen ryhmityksiin.",
        
        "Lopulta sinun on p√§√§st√§v√§ Suomen t√§rkeimmille lentokentille ja vapautettava ne. Vain sin√§ voit est√§√§ Suomen joutumasta t√§ysin vihollisen hallintaan. "
        "Taistele nopeudella ja √§lyll√§, hallitse resurssejasi ja est√§ vihollisen vastaiskut. Kun olet vapauttanut viimeisenkin kent√§n ja Ven√§j√§ on ly√∂ty, "
        "voit ylpe√§n√§ palata takaisin ensimm√§iselle vapautetulle kent√§lle. Olet voittanut taistelun ja pelastanut Suomen."
    ]

    for osa in tarina:
        os.system('cls' if os.name == 'nt' else 'clear')  # Os system clear = poistaa tekstin terminalista
        print(osa)
        wait_for_enter()

if __name__ == "__main__":
    display_story()
    
    # Tarina loppuessa pelaajan perusn√§ytt√∂ eli statsit n√§kyviin
    os.system('cls' if os.name == 'nt' else 'clear')  # Os system clear taas 
    print("Tarinan loppu. Paina enter aloittaaksesi seikkailun...")
    wait_for_enter()

    player_id = '1' 
    
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        player, remaining_airports = get_player_status(player_id)
        if player:
            display_player_status(player, remaining_airports)
        else:
            print("Pelaajan tietojen haku ep√§onnistui.")
        
        choice = input("Valitse toiminto (1, 2 tai 3): ")
        
        if choice == '1':
            list_airports_by_owner('Finland', 'üü¶') 
        elif choice == '2':
            list_airports_by_owner('Russia', 'üü•') 
        elif choice == '3':
            list_all_airports() 
        else:
            print("Virheellinen valinta, jatketaan...")
        
     
        wait_for_enter()

